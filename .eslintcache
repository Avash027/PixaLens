[{"D:\\Projects\\texttoimg\\src\\index.js":"1","D:\\Projects\\texttoimg\\src\\App.js":"2","D:\\Projects\\texttoimg\\src\\reportWebVitals.js":"3","D:\\Projects\\texttoimg\\src\\util\\Display.js":"4"},{"size":478,"mtime":1610451882316,"results":"5","hashOfConfig":"6"},{"size":2495,"mtime":1610461357929,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":1589,"mtime":1610460488228,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1ac4q9f",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\texttoimg\\src\\index.js",[],["20","21"],"D:\\Projects\\texttoimg\\src\\App.js",["22"],"import { TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport Display from \"./util/Display\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nconst App = (props) => {\n  const [imageList, updateImageList] = useState([]);\n  const [query, handleQuery] = useState(\"\");\n  const { transcript, resetTranscript } = useSpeechRecognition();\n  const [speechUsed, updateSpeechUsed] = useState(false);\n  const GetImages = async () => {\n    updateSpeechUsed(false);\n    const response = await fetch(\n      `https://pixabay.com/api/?key=19856103-8aca091369517f2334a8974ba&q=${encodeURIComponent(\n        query\n      )}&image_type=photo&pretty=true`\n    );\n    const rawImageObject = await response.json();\n    const rawImageList = rawImageObject.hits;\n\n    const imageList = cleanImageList(rawImageList);\n    updateImageList(imageList);\n  };\n\n  function textToImageStart() {\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      alert(\"Sorry!! Your browser currently doesn't support voice recognition\");\n      return;\n    }\n    SpeechRecognition.startListening();\n  }\n\n  function textToImageStop() {\n    SpeechRecognition.stopListening();\n    handleQuery(transcript);\n    updateSpeechUsed(true);\n  }\n\n  if (speechUsed) GetImages();\n\n  return (\n    <div className=\"App\" align=\"center\">\n      <form className=\"mainForm\" noValidate autoComplete=\"off\">\n        <TextField\n          id=\"standard-basic\"\n          label=\"Enter the query\"\n          value={query}\n          onChange={(event) => {\n            handleQuery(event.target.value);\n          }}\n        />\n        <br></br>\n        <br></br>\n        <Button variant=\"contained\" color=\"secondary\" onClick={GetImages}>\n          Search\n        </Button>\n        <br></br>\n        <br></br>\n        <Button variant=\"contained\" color=\"primary\" onClick={textToImageStart}>\n          Start Talking\n        </Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={textToImageStop}>\n          Stop Talking\n        </Button>\n        <br></br>\n        <br></br>\n\n        {imageList.length > 0 && <Display imageList={imageList}></Display>}\n      </form>\n    </div>\n  );\n};\n\nconst cleanImageList = (rawImageList) => {\n  const imageList = [];\n  for (const i of rawImageList) {\n    imageList.push({\n      previewURL: i.previewURL,\n      webformatURL: i.webformatURL,\n    });\n  }\n  return imageList;\n};\n\nexport default App;\n","D:\\Projects\\texttoimg\\src\\reportWebVitals.js",[],"D:\\Projects\\texttoimg\\src\\util\\Display.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":12,"column":23,"nodeType":"29","messageId":"30","endLine":12,"endColumn":38},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'resetTranscript' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]